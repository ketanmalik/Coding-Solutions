
/**
 * Leetcode #368  - https://leetcode.com/problems/largest-divisible-subset/
 * 
 * @author ketanmalik
 * June 13 2020
 * */

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

class LC368 {

	public static void main(String[] args) {
		System.out.println(Arrays.toString(largestDivisibleSubset(new int[] { 873, 61, 950, 701, 656, 249, 932, 581,
				404, 989, 476, 530, 915, 75, 850, 519, 936, 69, 710, 917, 185, 507, 712, 679, 62, 11, 776, 354, 276,
				309, 226, 336, 259, 926, 344, 209, 924, 910, 197, 399, 791, 111, 825, 992, 630, 760, 413, 691, 677, 597,
				388, 627, 610, 750, 403, 191, 103, 30, 851, 681, 717, 461, 958, 60, 968, 167, 335, 229, 715, 85, 372,
				178, 363, 159, 669, 775, 849, 697, 723, 397, 437, 350, 6, 186, 104, 548, 641, 133, 673, 201, 859, 613,
				148, 947, 759, 863, 32, 482, 392, 941, 844, 550, 961, 619, 658, 693, 498, 446, 394, 855, 631, 497, 623,
				981, 153, 295, 182, 925, 794, 893, 424, 92, 3, 638, 123, 484, 29, 415, 327, 578, 728, 297, 737, 990,
				176, 383, 31, 164, 232, 785, 787, 212, 937, 433, 745, 651, 709, 890, 543, 982, 545, 770, 456, 28, 151,
				223, 355, 686, 286, 219, 727, 668, 382, 310, 452, 520, 740, 953, 970, 391, 13, 285, 145, 192, 830, 267,
				648, 417, 222, 496, 171, 918, 606, 208, 261, 892, 426, 339, 559, 807, 454, 842, 196, 643, 52, 481, 140,
				244, 662, 758, 243, 870, 174, 464, 21, 986, 54, 193, 666, 5, 780, 128, 4, 142, 876, 596, 436, 143, 431,
				121, 570, 716, 636, 506, 852, 125, 642, 224, 110, 47, 654, 71, 72, 556, 299, 939, 343, 368, 82, 773,
				840, 56, 694, 907, 692, 216, 549, 575, 340, 542, 799, 801, 588, 1000, 428, 367, 921, 529, 438, 264, 736,
				555, 779, 455, 988, 903, 646, 395, 552, 119, 895, 810, 879, 45, 466, 44, 117, 194, 835, 738, 272, 510,
				359, 908, 288, 166, 247, 163, 139, 79, 458, 416, 352, 995, 647, 396, 956, 112, 792, 580, 609, 916, 414,
				347, 37, 500, 748, 311, 913, 557, 329, 819, 141, 979, 277, 678, 628, 24, 41, 376, 504, 127, 969, 886,
				457, 985, 897, 742, 323, 95, 816, 621, 493, 516, 77, 846, 263, 595, 899, 50, 722, 867, 898, 546, 824,
				135, 422, 633, 959, 53, 207, 690, 695, 653, 857, 315, 375, 349, 34, 725, 406, 469, 177, 705, 366, 1,
				839, 98, 564, 676, 150, 122, 149, 625, 225, 687, 378, 253, 477, 563, 603, 441, 76, 102, 250, 991, 130,
				198, 594, 238, 387, 747, 611, 479, 105, 377, 331, 126, 287, 772, 278, 714, 527, 704, 168, 904, 405, 124,
				25, 106, 764, 445, 971, 608, 302, 425, 478, 960, 16, 707, 280, 535, 501, 291, 987, 434, 462, 553, 539,
				228, 317, 911, 233, 534, 505, 663, 408, 831, 369, 40, 978, 540, 8, 316, 68, 793, 129, 683, 356, 891,
				199, 189, 616, 951, 20, 767, 640, 949, 337, 652, 778, 169, 781, 488, 236, 567, 927, 964, 312, 266, 730,
				215, 239, 783, 803, 270, 12, 427, 566, 528, 974, 84, 997, 298, 996, 574, 711, 972, 515, 696, 398, 115,
				435, 409, 393, 834, 813, 161, 871, 365, 905, 592, 517, 473, 59, 887, 494, 757, 254, 524, 242, 533, 330,
				818, 63, 206, 165, 15, 432, 731, 688, 213, 561, 385, 615, 624, 460, 963, 65, 7, 601, 282, 134, 345, 221,
				650, 919, 664, 702, 746, 389, 307, 43, 629, 786, 733, 318, 290, 518, 782, 440, 326, 483, 999, 380, 94,
				472, 976, 157, 348, 384, 522, 957, 292, 933, 22, 845, 847, 829, 880, 23, 531, 195, 584, 583, 558, 665,
				572, 853, 784, 935, 763, 984, 83, 214, 928, 802, 900, 741, 205, 766, 700, 698, 81, 35, 837, 136, 755,
				523, 147, 703, 447, 808, 137, 442, 513, 670, 943, 99, 430, 351, 674, 268 }).toArray()));
	}

	public static List<Integer> largestDivisibleSubset(int[] nums) {
		List<Integer> res = new ArrayList<>();
		if (nums.length == 0)
			return res;
		int[] dpTable = new int[nums.length];
		Arrays.fill(dpTable, 1);
		Arrays.sort(nums);
		int max = 1, prev = -1;
		for (int j = 1; j < nums.length; j++) {
			for (int i = 0; i < j; i++) {
				if (nums[j] % nums[i] == 0) {
					dpTable[j] = Math.max(dpTable[j], dpTable[i] + 1);
					if (max < dpTable[j])
						max = dpTable[j];
				}
			}
		}
		for (int i = dpTable.length - 1; i >= 0; i--) {
			if (dpTable[i] == max && (prev == -1 || prev % nums[i] == 0)) {
				res.add(nums[i]);
				max -= 1;
				prev = nums[i];
			}
		}
		return res;
	}
}